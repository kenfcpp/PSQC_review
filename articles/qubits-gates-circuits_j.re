= 量子ビット、ゲート、回路

== ビットと量子ビット
　最もよく知られているデジタル システムは、2 進数、つまり「ビット」に基づいています。
各ビットは「1」または「0」のいずれかの値を取ることができ、任意のデータをこのようなバイナリ表現で表すことができます。
さらに、任意の論理演算をビットを使用して実装できます。
これらのよく知られたシステムは、古典物理学の日常的な法則に支配されているため、「古典的」システムと呼ぶことにします。
@<br>{}
　量子コンピューティングは、いくつかの重要な点で従来のコンピューティングとは異なります。 
量子コンピューティングにおける情報の基本単位は、@<i>{qubit：量子ビット} (「キュービット」と発音) です。
量子ビットの機能と動作はビットとはまったく異なります。量子コンピューティングの研究の出発点として、まずは主な違いを指摘し、議論することから始めます。

=== 空間回路と時間回路
単純な古典的論理回路は、図 1.1(a) に示す NOT ゲートで表されます。
NOT ゲートは「0」を「1」に変換し、その逆も行います。 
この回路図では、水平方向は空間を表しています。
つまり、回路の入力と出力は回路内の異なるポイントから物理的にアクセス可能であり、同時に測定できます。
@<br>{}
　NOTゲートの量子バージョンは、図1.1(b)に示すXゲートです。
量子ビットの場合、「0」と「1」の状態は通常、それぞれ|0>、|1>と表記されます。
この表記の意味については後のセクションで詳しく説明しますが、今のところは、これらを2つの状態のラベルとして考えてください。
この場合、水平方向は時間を表します。
つまり、回路の入力と出力は、X ゲート操作を実行した後の同じ量子ビットの状態を表します。
言い換えれば、古典論理の通常の構造とは異なり、量子ゲートは単一の量子ビットまたは量子ビットのセットに対して実行する操作を表します。
出力は実質的に入力を上書きし、ゲートが適用されるたびに量子ビットの状態が変化します。

=== 重ね合わせ
古典的なビットは「0」か「1」のいずれかでなければなりません。
対照的に、量子ビットは一部が「0」で一部が「1」である@<i>{重ね合わせ状態}になることもできます。

//image[fig1][古典的 NOT ゲートと量子 NOT ゲートの解釈][scale=0.3]{
//}


量子ビットが「1」または「0」の状態にある場合、その量子ビットは基底状態にあると言います。@<fn>{fn-1}

//footnote[fn-1][より正確には、|0> と |1> は「計算基底」または「標準基底」状態として知られています。本章では、標準基底に限定して議論し、単に基底状態と呼ぶことにします。]

基底状態の場合、古典ゲートの状態を測定するのと同じように、状態を変更せずに量子ビットの状態を何度でも測定できます。
重ね合わせ状態も、測定すると、混合によって決まる確率で「0」または「1」のいずれかが生成されます。
この場合、測定を行うという行為によって重ね合わせ状態が構成基底状態の 1 つに「崩壊」し、重ね合わせ状態に保存された情報は失われます。
例えば、|ψ>が重ね合わせ状態を表している場合、いつでも量子ビットを測定すると状態が|0>または|1>に崩壊し、重ね合わせ状態の情報が破壊されます。
この時点から、量子ビットを繰り返し測定すると、古典的なビットと同様に、常に最初の測定と同じ結果が得られます。

　数学的には重ね合わせ状態は次のように書ける。

//indepimage[eq_1]
#@# \begin{equation}
#@# |\psi\rangle = \alpha |0\rangle + \beta |1\rangle\tag{1.1}
#@# \end{equation}

ここで、α と β は複素定数です。

　前述のように、このような重ね合わせ状態が測定された場合、常に |0> または |1> のいずれかが示されますが、それぞれの確率は α と ẞ によって決定されます。
具体的には、2つの可能な結果を測定する確率は次のように与えられる。

//indepimage[eq_2]
#@# \begin{equation}
#@# Pr[0] = |\alpha|^2, \quad Pr[1] = |\beta|^2\tag{1.2}
#@# \end{equation}

これらが測定の唯一の可能な結果である場合、確率の合計は1になるか、

//indepimage[eq_3]
#@# \begin{equation}
#@# |\alpha|^2 + |\beta|^2 = 1\tag{1.3}
#@# \end{equation}

この重ね合わせ状態を表現する能力は、量子コンピューティングの強力な秘密の一つです。
量子ビットは、ある意味では複数の可能性を並行して探索できるのです。

=== クローン作成禁止
古典的な論理回路では、いつでもビットの状態を測定し、その状態のコピーを必要なだけ作成できます。
量子ビットが基底状態のいずれかにあることが分かっている場合は、これを実行することもできます。
前述のように、|0> または |1> 状態を乱すことなく測定でき、必要に応じて |0> または |1> のコピーをいくつでも作成できます。
@<br>{}
　しかし、任意の量子状態の正確で独立したコピーを作成することは@<i>{不可能}であることが判明しました。
これは@<i>{複製禁止定理}として知られています。
1.7節で証明を示しますが、今はこれが量子プログラマーにもたらす課題について考えてみましょう。
@<br>{}
　たとえば、回路を 1 回実行しただけでは、α または ẞ の推定値を得ることはできません。
クローニングにより、回路を実行し、その結果を多数コピーし、それぞれのコピーを測定して、
|0>または|1>を測定する確率から|α|^2と|β|^2を推定することができます。
クローニングがなければ、結果を一度しか測定できません。
多くの測定値を得るには、同じ計算を何度も実行し、（うまくいけば！）同じ結果を何度も生成する必要があります。
@<br>{}
　ブレークポイントやデバッグ、エラー回復のために状態のコピーを作成することはできません。
また、計算の過程で単一の状態に異なる演算子を適用することも困難です。
従来のプログラマーは状態のコピー機能を当然のことと考えていますが、この制限には調整が必要です。
@<br>{}
　量子状態をエンタングルメント（1.1.5節）を用いてコピーすることは可能であることが判明していますが、
コピー対象となる状態を破壊することによってのみ可能です。
これはコピーではなく状態の@<i>{転送}を表し、@<i>{テレポーテーション}と呼ばれます。

