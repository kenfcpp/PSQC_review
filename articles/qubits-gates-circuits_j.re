= Qubits, Gates, and Circuits

== Bits and Qubits
最もよく知られているデジタル システムは、2 進数、つまり「ビット」に基づいています。
各ビットは「1」または「0」のいずれかの値を取ることができ、任意のデータをこのようなバイナリ表現で表すことができます。
さらに、任意の論理演算をビットを使用して実装できます。
これらのよく知られたシステムは、古典物理学の日常的な法則に支配されているため、「古典的」システムと呼ぶことにします。
@<br>{}
　量子コンピューティングは、いくつかの重要な点で従来のコンピューティングとは異なります。 
量子コンピューティングにおける情報の基本単位は、qubit：量子ビット (「キュービット」と発音) です。
量子ビットの機能と動作はビットとはまったく異なります。量子コンピューティングの研究の出発点として、まずは主な違いを指摘し、議論することから始めます。

=== Circuits in Space vs. Circuits in Time
単純な古典的論理回路は、図 1.1(a) に示す NOT ゲートで表されます。
NOT ゲートは「0」を「1」に変換し、その逆も行います。 
この回路図では、水平方向は空間を表しています。つまり、回路の入力と出力は回路内の異なるポイントから物理的にアクセス可能であり、同時に測定できます。
@<br>{}
　NOTゲートの量子バージョンは、図1.1(b)に示すXゲートです。
量子ビットの場合、「0」と「1」の状態は通常、それぞれ| 0 >、(1)と表記されます。
この表記の意味については後のセクションで詳しく説明しますが、今のところは、これらを 2 つの状態のラベルとして考えてください。
この場合、水平方向は時間を表します。つまり、回路の入力と出力は、X ゲート操作を実行した後の同じ量子ビットの状態を表します。
言い換えれば、古典論理の通常の構造とは異なり、量子ゲートは単一の量子ビットまたは量子ビットのセットに対して実行する操作を表します。
出力は実質的に入力を上書きし、ゲートが適用されるたびに量子ビットの状態が変化します。

=== Superposition
A classical bit must either be a "0" or a "1." In contrast, a qubit can also be in a super position state that is part "0" and part "1." If the qubit is in a "1" or "0" state, we say

